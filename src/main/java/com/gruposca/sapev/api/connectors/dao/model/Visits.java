/*******************************************************************************
 * Aedes Alert, Support to collect data to combat dengue
 * Copyright (C) 2017 Fundaci√≥n Anesvad
 *   
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *   
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *   
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 *******************************************************************************/
package com.gruposca.sapev.api.connectors.dao.model;

import java.math.BigDecimal;

// Generated 15-abr-2015 13:02:34 by Hibernate Tools 4.3.1

import java.util.Date;
import java.util.HashSet;
import java.util.Set;
import java.util.UUID;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

import org.hibernate.annotations.Proxy;

/**
 * Visits generated by hbm2java
 */
@Entity
@Proxy(lazy = false)
@Table(name = "Visits")
public class Visits implements java.io.Serializable {

	private static final long serialVersionUID = 1L;
	private UUID uuid;
	private Houses houses;
	private Plans plans;
	private TableElements tableElements;
	private Users users;
	private Date date;
	private byte feverish;
	private BigDecimal larvicide;
	private String comments;
	private boolean requalify;
	private Set<Inventories> inventorieses = new HashSet<Inventories>(0);
	private Set<Symptoms> symptomses = new HashSet<Symptoms>(0);
	private String beforeReconversion;

	public Visits() {
	}

	public Visits(UUID uuid, Houses houses, Plans plans, Date date,
			byte feverish, BigDecimal larvicide, String beforeReconversion) {
		this.uuid = uuid;
		this.houses = houses;
		this.plans = plans;
		this.date = date;
		this.feverish = feverish;
		this.larvicide = larvicide;
		this.beforeReconversion = beforeReconversion;
	}

	public Visits(UUID uuid, Houses houses, Plans plans,
			TableElements tableElements, Users users, Date date, byte feverish,
			BigDecimal larvicide, String comments, boolean requalify, String beforeReconversion, Set<Inventories> inventorieses,
			Set<Symptoms> symptomses) {
		this.uuid = uuid;
		this.houses = houses;
		this.plans = plans;
		this.tableElements = tableElements;
		this.users = users;
		this.date = date;
		this.feverish = feverish;
		this.larvicide = larvicide;
		this.comments = comments;
		this.requalify = requalify;
		this.inventorieses = inventorieses;
		this.symptomses = symptomses;
		this.beforeReconversion = beforeReconversion;
	}
	
	
	public Visits(UUID uuid, Houses houses, Plans plans,
			TableElements tableElements, Users users, Date date, byte feverish,
			BigDecimal larvicide, String comments, boolean requalify, String beforeReconversion) {
		this.uuid = uuid;
		this.houses = houses;
		this.plans = plans;
		this.tableElements = tableElements;
		this.users = users;
		this.date = date;
		this.feverish = feverish;
		this.larvicide = larvicide;
		this.comments = comments;	
		this.requalify = requalify;
		this.beforeReconversion = beforeReconversion;
	}

	@Id
	@Column(name = "uuid", columnDefinition = "BINARY(16)", unique = true, nullable = false)
	public UUID getUuid() {
		return this.uuid;
	}

	public void setUuid(UUID uuid) {
		this.uuid = uuid;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "houseUuid", nullable = false)
	public Houses getHouses() {
		return this.houses;
	}

	public void setHouses(Houses houses) {
		this.houses = houses;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "planId", nullable = false)
	public Plans getPlans() {
		return this.plans;
	}

	public void setPlans(Plans plans) {
		this.plans = plans;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "resultId")
	public TableElements getTableElements() {
		return this.tableElements;
	}

	public void setTableElements(TableElements tableElements) {
		this.tableElements = tableElements;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "userId")
	public Users getUsers() {
		return this.users;
	}

	public void setUsers(Users users) {
		this.users = users;
	}

	@Temporal(TemporalType.DATE)
	@Column(name = "date", nullable = false, length = 10)
	public Date getDate() {
		return this.date;
	}

	public void setDate(Date date) {
		this.date = date;
	}

	@Column(name = "feverish", nullable = false)
	public byte getFeverish() {
		return this.feverish;
	}

	public void setFeverish(byte feverish) {
		this.feverish = feverish;
	}

	@Column(name = "larvicide", nullable = false, precision = 10, scale = 2)
	public BigDecimal getLarvicide() {
		return this.larvicide;
	}

	public void setLarvicide(BigDecimal larvicide) {
		this.larvicide = larvicide;
	}

	@Column(name = "comments", length = 250)
	public String getComments() {
		return this.comments;
	}

	public void setComments(String comments) {
		this.comments = comments;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "visits")
	public Set<Inventories> getInventorieses() {
		return this.inventorieses;
	}

	public void setInventorieses(Set<Inventories> inventorieses) {
		this.inventorieses = inventorieses;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "visits")
	public Set<Symptoms> getSymptomses() {
		return this.symptomses;
	}

	public void setSymptomses(Set<Symptoms> symptomses) {
		this.symptomses = symptomses;
	}
	
	@Column(name = "requalify", nullable = false)
	public boolean isRequalify() {
		return this.requalify;
	}

	public void setRequalify(boolean requalify) {
		this.requalify = requalify;
	}
	
	@Column(name = "beforeReconversion", length = 1)
	public String getBeforeReconversion() {
		return this.beforeReconversion;
	}

	public void setBeforeReconversion(String beforeReconversion) {
		this.beforeReconversion = beforeReconversion;
	}

}
